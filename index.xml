<?xml version="1.0" encoding="UTF-8"?>
<!--  developerWorks ARTICLE TEMPLATE for AUTHORS:  V7.0 (ALT1 LAYOUT) -->
<!-- Welcome, authors!  To make this template easy to use, we've indicated the items 
you need to fill in, and the items you can ignore (for developerWorks editor use).

Here are the minimum items you need to fill in for your article:
  GEOGRAPHY (worldwide, for English, or a local site)
  KEYWORDS
  CONTENT-AREA-PRIMARY
  ARTICLE TITLE
  ARTICLE SUBTITLE
  ABSTRACT
  ARTICLE BODY (includes headings, paragraphs, lists, code listings, sidebars, 
  figures, and tables as needed)
  
As you fill in the items, please remember:
   - DO USE lowercase for all element names (the XML coding between angle brackets). 
   - DON'T USE span elements, code font elements, CDATA elements, or font classes.
  
Questions? Please consult: 
   - The many comment lines we've included in this file
   - The in-depth article: "Authoring with the developerWorks XML templates"
      http://www.ibm.com/developerworks/library/i-dwauthors/
     (This article includes this template and the complete author file package)
   - Your developerWorks editor
    
We welcome your feedback and look forward to publishing your content. -->
    <!-- DW DOCUMENT - REQUIRED   
For authors:  For local-site, choose one of the following: brazil, china, japan, 
russia, ssa (for Spanish South America), vietnam, or worldwide (for English).  
The remaining attributes are for developerWorks editor use only; do not edit. -->
<dw-document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dw="http://www.ibm.com/developerWorks/"
    xsi:noNamespaceSchemaLocation="../../schema/dw-document-7.0.xsd"
    local-site="worldwide">

    <!-- DW-ARTICLE - REQUIRED
The layout attribute is for developerWorks editor use only; do not edit.
For authors:  Use auto-number="yes" (recommended) to enable automatic 
numbering of headings for code listings, figures, and tables. This setting also 
is required to enable the use of the <xref> element.  -->

    <dw-article layout="ArticleStandardAlt1" auto-number="yes" skill-level="2"
        page-end-btt-link="yes">
        <!-- ID - REQUIRED
For developerWorks editor use only.  -->
        <id cma-id="" original="yes"/>
        <!-- KEYWORDS REQUIRED
For authors: Add unique keywords or key phrases that will help external 
search engines find your content.  Use commas to separate keywords 
and phrases.
For editors: For advice on effective keywords, see 
https://w3-connections.ibm.com/wikis/home?lang=en_US#!/wiki/W221102059c29_45c6_8a38_b438b0b24d5f/page/developerWorks%20title,%20meta%20tag,%20and%20SEO%20guidelines -->
        <keywords content=""/>
        <!-- META-LAST-UPDATED - OPTIONAL. Enter the month, day, and year this page was 
last updated, and your initials. This is optional because it's only an internal dW 
convenience to help editors know who last edited the file and when. -->
        <meta-last-updated month="12" day="22" year="2015" initials="gem"/>
        <!-- CONTENT-AREA-PRIMARY - REQUIRED
For authors: Select the main developerWorks content area (product or 
technology) that your article applies to if, you know it. If you're not sure 
of the correct value, just select "ibm" and the developerWorks editor will update it. -->
        <content-area-primary name="analytics"/>
        <!-- CONTENT-AREA-SECONDARY - OPTIONAL
For authors (optional): Select any related developerWorks content areas 
(product or technology) that your article applies to, if you know them. If 
you're not sure, just select "ibm" and the developerWorks editor will update it. -->
        <content-area-secondary name="rational"/>
        <!-- ARTICLE TITLE - REQUIRED
For authors: Craft a pithy, keyword-rich title with short, active verbs to best 
appeal to search engine ranking algorithms. No subtitle is needed.-->
        <title>Making Watson a Rockstar: Integrating IBM Watson on Bluemix with Spotify and Genius.com</title>
        <!-- PDF - OPTIONAL. For developerWorks editor use only. 
Size, page count, and URL are inserted automatically by CMA.  -->
        <pdf url="template-dw-article-alt1-7.0-pdf.pdf" pages="11" size="535KB"
            paperSize="common"/>
        <!-- AUTHOR - REQUIRED
For authors: In jobtitle, list your current title and, optionally, relevant positions, 
up to 8 words total.  Incorporate your company name.  
Examples: 
   "Founder and CEO of Melonfile" 
   "Head of Technology at Core International" 
   "IBM Distinguished Engineer, Cloud Architect, Rational Jazz founder" 
In your email, specify your developerWorks profile URL (your email address is not 
required, and it doesn't appear in the article).  If you don't have a developerWorks 
profile, consider creating one.  (A LinkedIn profile, or your own CV webpage, 
will suffice.)  In your bio, specify simply your Twitter profile as shown, nothing more.
If there are multiple authors, add more <author> elements.

For editors: In the CMA author bio associated with this article, edit the bio to 
include simply the author's linked Twitter profile as shown, nothing more. No 
further bio is included with this article.  Also, the author image must be 60x60.  
The <company-name> element is required but ignored.  And note that the author 
email is not required or used. -->
        <author
            jobtitle="Staff Software Engineer"
            email="https://www.ibm.com/developerworks/community/profiles/html/profileView.do?key=7d2d9d39-9f15-4a90-844d-24ad75e2bca0&amp;lang=en"
            publish-email="yes">
            <bio>
                <a href="https://twitter.com/DeLandB4Time">@DeLandB4Time</a>
            </bio>
            <img width="64" height="80"
                src="https://avatars3.githubusercontent.com/u/4561071"
                alt="Kevin DeLand"/>
            <author-name>
                <Prefix/>
                <GivenName>Kevin</GivenName>
                <FamilyName>DeLand</FamilyName>
                <Suffix/>
            </author-name>
            <company-name>IBM</company-name>
        </author>

        <!-- AUTHOR-LINK - OPTIONAL
For authors:  If you have a Google+ profile, enter it here, and update the
Links section of your profile page to include "IBM developerWorks" 
(www.ibm.com/developerworks/) as a site you contribute to.  This will cover the 
ownership claim on any future articles you write for developerWorks.  Only 
one profile URL is allowed per article. If this article has multiple authors, 
use the primary author's. -->
        <!-- <author-link type="google+">
            <url>https://plus.google.com/123456789012345678901</url>
        </author-link> -->

        <!-- TRANSLATOR OPTIONAL 
For editors:  Specify the name of the company or person that translated this content.  
If a company, enter the website URL; if a person, enter the person's email address. -->
        <!-- <translator company-website="" email=""></translator> -->

        <!-- DATE-PUBLISHED - REQUIRED. Enter the month, day, and year the article was 
first published. If you do not include an optional <date-updated> element (see below), 
the date on this element is displayed below the article title and is used as the value 
for the DC.Date meta tag that CMA adds to the html header. It is best practice to leave 
the date on this element as the original publish date and use the <date-updated> element 
to indicate the date that the most recent changes have been made to the article. -->        
        <date-published month="12" day="22" year="2015"/>
        <!-- DATE-UPDATED - OPTIONAL.  Although not strictly REQUIRED, it is very
important for SEO purposes that you remember to change this element to reflect the 
month, day, and year of the most recent update made to the article. When present, 
the date on this element is displayed below the article title and is used as the 
value for the DC.Date meta tag that CMA adds to the html header. -->
        <date-updated month="02" day="25" year="2014"/>
        <!-- DATE-TRANSLATED - OPTIONAL 
For developerWorks editor use only.  For local sites; use the date that this content 
was translated.
        <date-translated month="" year=""/> -->

        <!-- ABSTRACT - REQUIRED
For authors: The abstract does NOT appear in the article, but it does appear 
in the developerWorks technical library view and in search engine results. 
DO NOT include HTML tagging in the abstract. Summarize why the reader would 
benefit from your content, or what business problem would be solved.  Be succinct 
(no more than 5 sentences), and include keywords or key phrases that will help 
external search engines find your content. -->
        <abstract>Build a Node.js application to connect to your Spotify account, fetch song lyrics from Genius.com, and then use Watson APIs to do fun things with those lyrics. This article includes a demo, sample code, and full
            instructions for authenticating with Spotify, then fetching lyrics,  and connecting to the Watson APIs on Bluemix. This particular app will show you how to build an app which quizzes you on your foreign language skills by presenting the lyrics of your favorite songs in Spanish in a quiz-like format.</abstract>

        <!-- INTRODUCTORY VIDEO - OPTIONAL 
 For authors:  Optionally, develop a short video of yourself introducing the app you wrote 
 and perhaps demonstrating it on your computer or mobile device.  Send the video source 
 to your developerWorks editor.
 For editors:  If the author submits a video, follow the separate instructions on adding a
 thumbnail image, transcript, and closed-captions for the video on the developerWorks 
 YouTube channel. -->
        <!-- <introductory-video>
            <video-container>
                <video-url>//www.youtube.com/watch?v=THN_nq7W6PE</video-url>
                <thumbnail-image-url>//www.ibm.com/developerworks/library/wa-nodejs-app/sentiment-analysis-thumb-940x330.jpg</thumbnail-image-url>
                <video-title display="no">Build a Twitter sentiment analysis application using Node.js modules</video-title>
                <video-transcript-url>//www.ibm.com/developerworks/library/wa-nodejs-app/wa-nodejs-app-transcript-pdf.pdf</video-transcript-url>
                <video-length>
                    <minutes>3</minutes>
                    <seconds>54</seconds>
                </video-length>
            </video-container>
        </introductory-video> -->

        <!-- START OF ARTICLE BODY   
For authors: Your article can contain paragraphs, major headings, minor
headings, code listings, images, tables, sidebars, lists, highlighting, and 
"quoted" content in a larger font ("pull quotes"). 

DO NOT copy or cut and paste text from word processors such as 
Microsoft Word. The encoding method they use (even if UTF-8) creates 
invalid characters in the XML. Instead, save the Word document 
as a text file and then copy the text.  -->

        <docbody>

            <!--For authors: On writing style. As you compose your article, aim for a
conversational style, including the purpose of the app, why you chose the tools, 
frameworks, languages, etc. you did, and how you developed the app, including 
relevant instructional information about the tools, frameworks, languages, etc. 
you used.  Don't overdo it.  You can make assumptions that the reader has some 
level of these skills, and should state those assumptions in the article.  Your purpose 
should be to teach a fellow developer how to develop a similar app using services 
in BlueMix and how to contribute to further development of your app on JazzHub.  
You should present your material in easy-to-follow steps and include relevant 
screen captures and code snippets.  Short, to-the-point articles are best.  We can 
string multiple articles together in an easy-to-consume set, if necessary.-->

            <!-- PARAGRAPH 
 For authors: Every paragraph needs a beginning and ending element.
 Do not include unordered, ordered, or definition lists within a paragraph. -->
            <p>There is a growing movement (commonly called the STEAM movement) to integrate the Arts into STEM (Science, Technology, Engineering, Math), in orer to pique the interest of those, especially kids, who would not typically be interested in STEM topics. The Arts is a broad topic, covering music, games, dance, etc. How can we use Watson to have fun with the Arts? Since Watson's specialty is language, what if we were able to apply Watson to song lyrics? </p>


            <!-- PULLQUOTE - OPTIONAL -->
            <!-- You can use a <pullquote> element to highlight important text in a larger,
                 colored font.  Include the quote source only if someone other than
                 the author is being quoted. -->

            <pullquote>
                <pullquote-text>Waton's powerful language tools have been used to analyze everything from Jeopardy questions to medical documents. Why not expand Watson's expertise into the realm of art and entertainment?</pullquote-text>
                <pullquote-source/>
            </pullquote>


            <p>This article will give you a foundation to connect the powerful langauge processing capabilities of Watson to the songs and lyrics you love. We will start by authenticating with a Spotify account to retrieve playlists of popular songs, then fetching those song lyrics from <a href="http://genius.com">genius.com</a>, and finally using the Watson Developer Cloud to do fun and interesting things with the lyrics.</p>

            <p>In this installment of "Making Watson a Rock Star", we will use the Watson Language Translation service to translate the lyrics of popular songs into Spanish, to help English-speaking users improve their Spanish in a way that is fun, engaging, and memorable.</p>

            <button-block-two-column>
              <first-column>
                <button-link button-style="blue">
                  <text>Run the app</text>
                  <url>http://cuantos-caminos.mybluemix.net/</url>
                </button-link>
              </first-column>
              <second-column>
                <button-link button-style="blue">
                  <text>Get the code at GitHub</text>
                  <url>https://hub.jazz.net/project/kevindeland/cuantos-caminos</url><!-- TODO -->
                </button-link>
              </second-column>
            </button-block-two-column>


            <heading refname="" type="h2" back-to-top="no"
                inline-commenting-id="cmt_1">What you'll need to build a similar
                app</heading>

            <ol>
              <li>A Bluemix account</li>
              <li>A basic familiarity with <a
              href="http://www.ibm.com/developerworks/library/j-nodejs/index.html"
              >Node.js</a> and a Node.js development environment.</li>
              <li>These Node.js modules:
              <ul>
                <li><a href="https://github.com/visionmedia/express"
                       >Express framework</a>: Makes it easy to build
                Node.js web apps.</li>
                <li><a href="http://simplesentimentanalysis.bluemix.net/"
                       >Watson Developer Cloud</a>: Provides many SDKs that use cognitive computing to solve complex problems.</li>
                <li><a href="https://github.com/kevindeland/RapGenius-JS"
                       >RapGenius-JS module</a>: Provides a client that enables you to query genius.com (formerly rapgenius.com) and retrieve information about rap and rock artists and songs. (This repo is a slightly modified fork of the original listed <a href="https://github.com/kenshiro-o/RapGenius-JS">here</a>)</li>
              </ul>
              </li>
              <li>
                cloud foundry command line interface
              </li>
              <li>
                github command line
              </li>
              
            </ol>

            <!-- CALL-TO-ACTION-BLOCK - OPTIONAL  
For authors: Linking directly to immediately relevant resources in the sentence 
is preferred. But you also include supporting, tangential material at or near the 
end of a section for the reader to watch or read if desired.  For this supporting 
material, you can use "watch" or "read" elements. -->

            <call-to-action-block type="watch">
                <text>Getting started with Node.js (video demo)</text>
                <url>http://www.ibm.com/developerworks/offers/lp/demos/summary/j-jnodejs.html</url>
            </call-to-action-block>

            <call-to-action-block type="read">
              <text>Uploading your Bluemix application</text>
              <url>https://www.ng.bluemix.net/docs/#starters/upload_app.html</url>
            </call-to-action-block>

            <call-to-action-block type="read">
              <text>Spotify Authorization Guide</text>
              <url>https://developer.spotify.com/web-api/authorization-guide/</url>
            </call-to-action-block>

            <call-to-action-block type="read">
              <text>Genius API Docs</text>
              <url>https://docs.genius.com/</url>
            </call-to-action-block>

            <p>The steps below describe the most basic approach. For more
                advanced tooling to speed your development, see <a href="#tools"
                    >Additional tooling considerations</a>.</p>

            <heading refname="" type="h2" back-to-top="no"
                inline-commenting-id="cmt_2">Step 1. Fork the application code from Github, and Create Bluemix App</heading>

            <ol>
              <li>Go to <a href="https://github.com/kevindeland/letrista-watson">the git repository</a>, and click on "Fork" in the upper-right-hand corner. Give your new repository a name.</li>
              <li>
                In your command line, change into the repository you would like to put your code in, and clone from the git repo:
                <p><code>git clone git@github.ibm.com:disaster-hack-cio/cuantos-caminos.git</code></p>
              </li>
              <li>
                <code>cd</code> into your new repository
              </li>
              <li>
                <code>cd authorization_code</code>
              </li>
              <li>
                Use your preferred text editor to set your application name in the  <code>manifest.yml</code> file.               You must pick a name for your app, which will help form its URL. If your app name is <strong>my-watson-app</strong>, then your URL will be <strong>http://my-watson-app.mybluemix.net</strong>. Remember this URL, as you will need it in a few more places.
              <code-listing>
                <heading refname="manifest">manifest.yml</heading>
                <pre>
                  applications:
                  - name: ~YOUR_APP_NAME_HERE~
                  memory: 128M
                  command: node app.js
                  instances: 1
                  path: .
                  env:
                  NODE_ENV: development
                </pre>
              </code-listing>

              </li>
              <li>
                Add your app URL to the <code>config.js</code> file, so that your application knows which address to redirect to.
                <code-listing>
                  <heading refname="config_app">config.js</heading>
                  <pre>

                    var config = {};

                    var port = process.env.PORT || 8888; 

                    var my_uri = process.env.VCAP_SERVICES ? 'http://YOUR-APP-NAME.mybluemix.net' : 'http://localhost:' + port;

                    config.url = {
                    port: port,
                    uri: my_uri,
                    redirect_uri: my_uri + '/callback'
                    };

                  </pre>
                </code-listing>

              </li>
              <li>
                Push your application to Bluemix using the following commands
                <ul>
                  <li><code>cf api api.ng.bluemix.net</code></li>
                  <li><code>cf login</code></li>
                  <li><code>cf push</code></li>
                  <li><code>Ctrl+C</code> to cancel the push, after you can see it has failed</li>
                </ul>

                Note that this push should <strong>fail</strong>, because it requires connection to a Watson Translation Service.

              </li>
            </ol>

            <p>If you open your browser and go to your app URL, you should see that the app is not working properly. We still need to perform a few more steps to get things running.</p>
            
            <!-- MONOSPACE FONT 
For authors:  Highlight code elements (the name of a command, class, 
object, method, code snippet, or anything the user types in) in a sentence using 
the <code> element for monospace font.  Within the <code> element, you can 
have up to 105 consecutive characters without a space. -->
                          
         
            <heading refname="" type="h2" back-to-top="no"
                     inline-commenting-id="cmt_3">Step 2. Create a Watson Language Translation service, and bind your Bluemix app to it.</heading>
            <p>In our last step we got the code and created our Bluemix app. Now we are going to create a Watson Language Translation Service to bind to our application.</p>

            <ol>
              <li>
                Log in to your Bluemix Account on the <a href="https://console.ng.bluemix.net/">Bluemix Console</a>.
              </li>
              <li>
                Click on CATALOG to view the Bluemix Services available.
              </li>
              <li>
                Check the Watson checkbox on the left-hand panel to filter only the Watson services.
                Find and click the Language Translation Service
                <figure>
                  <heading refname="">Create a new Watson Languate Translation Service</heading>
                  <img
                      alt="Create a new Watson Languate Translation Service"
                      height="244" src="WatsonLTS.png" width="208"/>
                </figure>
              </li>
              <li>
                On the right side of the page, under the <em>Add Service</em> header, fill in the fields with the below values:
                <ul>
                  <li><strong>Apps</strong>: select your recently created app from the drop-down box</li>
                  <li><strong>Service Name</strong>: choose your own</li>
                  <li><strong>Selected Plan</strong>: Standard</li>
                </ul>
                <figure>
                  <heading refname="">Name the Service and Bind it to your app</heading>
                  <img
                      alt="Create a new Watson Languate Translation Service"
                      height="244" src="CreateWTLS.png" width="208"/>
                </figure>
              </li>
              <li>
                Click <strong>CREATE</strong>, then restage your application to allow it to bind to your new service
              </li>
            </ol>
            <p>Great! Your application should now be running! Let's go back to the browser and visit our app URL and see what happens.</p>
            <figure>
              <heading refname="">Looks good so far</heading>
              <img
                  alt="Looks good so far"
                  height="244" src="LoginScreen.png" width="312"/>
            </figure>
            <p>Let's try logging in with Spotify.</p>
            <figure>
              <heading refname="">Invalid Client</heading>
              <img
                  alt="Invalid Client"
                  height="244" src="InvalidClient.png" width="312"/>
            </figure>
            <p>Our app is not yet registered with Spotify, causing this error. Continue to the next step to see how to fix this</p>

            
            <heading refname="" type="h2" back-to-top="no"
                     inline-commenting-id="cmt_4">Step 3. Register your application with Spotify.</heading>
            <p>We cannot yet authenticate because we have not registered our application with Spotify. Follow these steps to do that.</p>

            <ol>
              <li>Go to your <a href="https://developer.spotify.com/my-applications"> Spotify Developer Account</a> to manage your applications. Log in if necessary.</li>
              <li>
                Click on CREATE AN APP
                <figure>
                  <heading refname="">Create an App</heading>
                  <img
                      alt="Create an App"
                      height="244" src="SpotifyCreateAnApp.png" width="312"/>
                </figure>
              </li>
              <li>
                Fill out your application name and description
                <figure>
                  <heading refname="">Name your App</heading>
                  <img
                      alt="Name your App"
                      height="244" src="SpotifyNameApp.png" width="416"/>
                </figure>
              </li>
              <li>
                Here comes the important part. On this page, we will specify the parameters needed for authentication. We need to set the Redirect URIs so Spotify can redirect to our app after authentication.  Also, we need our Client ID and our Client Secret to authenticate.
                <ul>
                  <li>
                    Copy the Client ID and Client Secret, and paste them into your config.js file.
                    <figure>
                      <heading refname="">Client ID and Client Secret</heading>
                      <img
                          alt="Client ID and Client Secret"
                          height="244" width="440" src="SpotifyClientIDSecret.png"/>
                    </figure>

                    <code-listing>
                      <heading refname="config_spotify">config.js</heading>
                      <pre>
                        config.spotify = {
                        client_id: 'GET_FROM_SPOTIFY_IN_STEP_3', // Your client id
                        client_secret: 'GET_FROM_SPOTIFY_IN_STEP_3' // Your client secret
                        };
                      </pre>
                    </code-listing>
                  </li>
                  <li>
                    Add two Redirect URIs: <strong>YOUR_APP_URL/callback</strong> for your Bluemix app, and <strong>http://localhost:8888</strong> for local testing.
                    <figure>
                      <heading refname="">Redirect URIs</heading>
                      <img
                          alt="Redirect URIs"
                          height="244" width="440" src="RedirectURIs.png"/>
                    </figure>

                  </li>
                  <li>
                    Click <strong>SAVE</strong> to save your changes.
                  </li>
                </ul>
              </li>
            </ol>

            <heading refname="" type="h2" back-to-top="no"
                     inline-commenting-id="cmt_5">Step 4. Register your Application with Genius.com</heading>
            <p>Genius.com is a website that hosts song lyrics, as well as user-added annotations for those songs. We are going to use their API to access song lyrics, which we will then translate with Watson Language Translation. But first, we must register our Application to get an API Key. </p>
            <ol>
              <li>
                Go to the <a href="https://genius.com/api-clients">Genius API Client Site</a>.
              </li>
              <li>
                Fill in the APP NAME and APP WEBSITE URL fields, and click "Save". You can leave REDIRECT URI blank because we will not be authenticating with Genius.
                <figure>
                  <heading refname="">Create a New API Client</heading>
                  <img
                      alt="Create a New API Client"
                      height="244" width="400" src="GeniusNewAPI.png"/>
                </figure>
              </li>
              <li>
                Copy and Paste the CLIENT_ID, CLIENT_SECRET, and CLIENT_ACCESS_TOKEN into config.js
                <code-listing>
                <heading refname="config_genius">config.js</heading>
                <pre>
                  config.genius = {
                  CLIENT_ID: "GET_FROM_GENIUS_IN_STEP_4",
                  CLIENT_SECRET: "GET_FROM_GENIUS_IN_STEP_4",
                  CLIENT_ACCESS_TOKEN: "GET_FROM_GENIUS_IN_STEP_4"
                  };
                </pre>
              </code-listing>
              </li>

            </ol>



            <heading refname="" type="h2" back-to-top="no"
                     inline-commenting-id="cmt_6">Step 5 (Optional). Testing Locally</heading>
            <p>It is good practice to test locally before you push to the cloud. Before we run our app locally, we have to make some of our Bluemix Environment Variables available locally.</p>
            <ol>
              <li>Go to your Bluemix Dashboard.</li>
              <li>Find your app and click on it to bring up your app page.</li>
              <li>
                Find the Watson Language Translation Service and click "Show Credentials"
                <figure>
                  <heading refname="">Show Credentials</heading>
                  <img
                      alt="Show Credentials"
                      height="244" width="200" src="WLTSCredentials.png"/>
                </figure>              
              </li>
              <li>
                Copy and paste the <code>username</code> and <code>password</code> into config.js
                <code-listing>
                  <heading refname="config_watson">config.js</heading>
                  <pre>
                    config.watson = {
                    username: 'GET_FROM_BLUEMIX_IN_STEP_2',
                    password: 'GET_FROM_BLUEMIX_IN_STEP_2',
                    version: 'v2'
                    };
                  </pre>
                </code-listing>
              </li>
              
            </ol>
            <p>After saving these changes to your code, you can test your app locally.</p>
            <ol>
              <li>Change to your project's root directory.</li>
              <li>Run <code>node app.js</code></li>
              <li>Open your browser and go to <code>localhost:8888</code></li>
              <li>Log in with your Spotify Account (using Facebook if necessary).</li>
              <li>Choose a quiz to play, and have fun!</li>
            </ol>

            

            <heading type="h2" refname="pushing" back-to-top="no"
                     inline-commenting-id="cmt_7">Step 6: Pushing to Bluemix</heading>
            <p>Finally, let's push our app to Bluemix so the world can play!</p>
            <ol>
              <li>Change to your project's root directory.</li>
              <li><code>cf push</code></li>
              <li>Go to browser to see your project in action!</li>
            </ol>

            <p>Let's see what kind of songs we get. Here are a few simple example questions:</p>

            <figure>
              <heading refname="">Some words don't translate well to Spanish.</heading>
              <img
                  alt="Some words don't translate well to Spanish"
                  height="244" src="toker.png" width="400"/>
            </figure>

            <figure>
              <heading refname="">Some songs have a lot of repetition.</heading>
              <img
                  alt="Number Nine"
                  height="242" src="number9.png" width="400"/>
            </figure>

            <figure>
              <heading refname="">Hey, now here's a popular song.</heading>
              <img
                  alt="Hey Jude"
                  height="300" src="heyJude.png" width="600"/>
            </figure>


            <heading refname="" type="h2" back-to-top="no"
                     inline-commenting-id="cmt_8">Step 7 (Optional). Add your own playlist to the selection.</heading>
            <p>Okay, now we have all the parts in place to complete your
            app. The app defaults to use three playlists: a Rock playlist, a Rap playlist, and a Beatles playlist. Follow these instructions to add your own. (Note that you are better off adding playlists with songs that have words. Apologies to all you lovers of Classical Music and ambient trance).</p>

            <p>To add your own Playlist, you will need two fields:</p>
            <ol>
              <li>the Spotify id of the user who owns the playlist</li>
              <li>The playlist id</li>
            </ol>

            <p>Follow these steps to find them:</p>
            <ol>
              <li>Go to your playlist, in the web browser or native app.</li>
              <li>
                Click the dropdown menu, and click on "Copy Spotify URI"
                <img alt="Click on 'Copy Spotify URI'" height="344" src="SpotifyPlaylistDropdown.png" width="150" />
                
              </li>
              
              <li>
                Go to the angular file [public/js/quiz.js] and find the variable 'playlist_map'
                <img alt="Add your own playlist here" src="addPlaylistQuizJs.png" height="300" width="500"/>
              </li>
              <li>Create a new key in the map with value having your user id and spotify id.</li>
              <li>
                Go to the html file [public/index.html] and find where all the playlists are displayed.
                <img alt="Add your own playlist here" src="addPlaylistIndexHtml.png" height="200" width="600"/>
              </li>
              <li>add a new line, with playlistid=x, where x is the key you used in the previous 2 steps.</li>
            </ol>
            
            <heading type="h2" refname="conclusion" back-to-top="no"
                     inline-commenting-id="cmt_9">Conclusion and Next Steps</heading>

            <p>The Translation Service is just one of many Watson Language Services made available on Bluemix. Which of the other Watson Services do you think we could use in conjunction with song lyrics?</p>
            <ul>
              <li>Sentiment Analysis -- track the overall sentiments of songs, and then generate playlists which cater to a certain mood.</li>
              <li>Concept Insights -- extract what concepts artists are singing about, and contrast and compare them.</li>
              <li>Relationship Extraction (Alchemy API) -- find relationships between subjects, actions, and objects in songs, and build a database of lyrics tools to generate new songs.</li>
            </ul>
            

            <!-- RELATED-TOPICS-BLOCK - REQUIRED -->
            <related-topics-block>
                <link>
                    <text>Node.js</text>
                    <url>http://www.ibm.com/developerworks/topics/nodejs/</url>
                </link>
                <link>
                    <text>JavaScript</text>
                    <url>http://www.ibm.com/developerworks/topics/javascript/</url>
                </link>
                <link>
                    <text>Social analytics</text>
                    <url>http://www.ibm.com/developerworks/topics/social data analytics/</url>
                </link>
            </related-topics-block>
            <!-- END OF ARTICLE BODY
For developerWorks editor use only. -->
        </docbody>
        <!-- LINK-TO-ENGLISH - OPTIONAL 
If this article is on a local site, this include this link to the English language
article. -->
        <link-to-english/>
    </dw-article>
</dw-document>
