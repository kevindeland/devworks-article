<?xml version="1.0" encoding="UTF-8"?>
<dw-document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dw="http://www.ibm.com/developerWorks/"
    xsi:noNamespaceSchemaLocation="http://dw.rtp.raleigh.ibm.com/developerworks/library/schema/7.0/dw-document-7.0.xsd"
    local-site="worldwide">

    <dw-article layout="ArticleStandardAlt1" auto-number="yes" skill-level="2"
        page-end-btt-link="yes">

        <id cma-id="1026350" original="yes"/>

        <keywords content="cognitive, Watson, translation, Bluemix"/>

        <meta-last-updated month="01" day="28" year="2016" initials="corbinm@us.ibm.com"/>

        <content-area-primary name="cognitive"/>

        <!--<content-area-secondary name="rational"/>-->


        <title>Making Watson a rockstar: Test your Spanish language knowledge with
            translated song lyrics</title>
        <subtitle>Integrating IBM Watson Translation Service on Bluemix with Spotify
            and Genius.com</subtitle>

        <pdf url="index-pdf.pdf" pages="12" size="803KB" paperSize="common"/>

        <author jobtitle="Staff Software Engineer" email="kmdeland@us.ibm.com"
            publish-email="yes">
            <bio>
                <a href="https://twitter.com/DeLandB4Time">@DeLandB4Time</a>
            </bio>
            <img width="60" height="60"
                src="https://avatars3.githubusercontent.com/u/4561071" alt="Kevin DeLand"/>
            <author-name>
                <Prefix/>
                <GivenName>Kevin</GivenName>
                <FamilyName>DeLand</FamilyName>
                <Suffix/>
            </author-name>
            <company-name>IBM</company-name>
            <social-networks>
                <social-network>
                    <social-network-name>Twitter</social-network-name>
                    <social-network-url>https://twitter.com/DeLandB4Time</social-network-url>
                </social-network>
                <social-network>

                    <social-network-name>dW Connections</social-network-name>
                    <social-network-url>https://www.ibm.com/developerworks/community/profiles/html/profileView.do?key=7d2d9d39-9f15-4a90-844d-24ad75e2bca0&amp;lang=en</social-network-url>
                </social-network>
            </social-networks>
        </author>


        <date-published month="01" day="29" year="2016"/>

        <!--<date-updated month="01" day="29" year="2016"/>-->

        <abstract>Build a Node.js application to connect to and authenticate with your
            Spotify account, fetch song lyrics from Genius.com, and then use Watson APIs
            on Bluemix to do fun things with those lyrics. This tutorial, demo, and sample
            app will show you how to build an app which quizzes you on your foreign
            language skills by presenting the lyrics of your favorite songs in Spanish in
            a quiz-like format.</abstract>

        <docbody>

            <p>There is a growing movement (commonly called the STEAM movement) to
                integrate the Arts into STEM (Science, Technology, Engineering, Math). The
                STEAM movement aims to pique the interest of those people, especially
                kids, who would not typically be interested in STEM topics. The Arts is a
                broad topic, covering music, games, dance, and so on.</p>
            <p>Watson's powerful language tools have been used to analyze everything from
                Jeopardy questions to medical documents. Why not expand Watson's expertise
                into the realm of art and entertainment? How can we use Watson to have fun
                with the Arts? Since Watson's specialty is language, what if we were able
                to apply Watson to song lyrics? </p>

            <pullquote>
                <pullquote-text>Waton's powerful language tools have been used to analyze
                    everything from Jeopardy questions to medical documents. Why not
                    expand Watson's expertise into the realm of art and
                    entertainment?</pullquote-text>
                <pullquote-source/>
            </pullquote>


            <p>This tutorial helps you understand how to connect the powerful langauge
                processing capabilities of Watson to the songs and lyrics you love. We
                will use a Spotify account to retrieve playlists of popular songs, then
                fetch the lyrics for those songs from <a href="http://genius.com"
                    >genius.com</a>, and then finally use the Watson Developer Cloud to do
                fun and interesting things with the lyrics.</p>

            <p>In this installment of "Making Watson a Rock Star", we will use the Watson
                Language Translation service to translate the lyrics of popular songs into
                Spanish, with the hope of helping English-speaking users improve their
                Spanish in a way that is fun, engaging, and memorable.</p>

            <button-block-two-column>
                <first-column>
                    <button-link button-style="blue">
                        <text>Run the app</text>
                        <url>http://cuantos-caminos.mybluemix.net/</url>
                    </button-link>
                </first-column>
                <second-column>
                    <button-link button-style="blue">
                        <text>Get the code at GitHub</text>
                        <url>https://hub.jazz.net/project/kevindeland/cuantos-caminos</url>
                    </button-link>
                </second-column>
            </button-block-two-column>


            <heading refname="" type="h2" back-to-top="no" inline-commenting-id="cmt_1"
                >What you'll need to build a similar app</heading>

            <ol>
                <li>A Bluemix account (You can <a href="http://www.bluemix.net">request a
                        free trial here</a>. Or, did you know that <a
                        href="https://www.ibm.com/marketplace/cloud/developer-program/us/en-us/?cm_sp=dwpremium-_-funwithcognitivecomputing-_-article"
                        >developerWorks Premium</a> gives you a 12-month subscription to
                    IBM Bluemix and 240 USD in cloud credits on Bluemix?)</li>
                <li>A basic familiarity with <a
                        href="http://www.ibm.com/developerworks/library/j-nodejs/index.html"
                        >Node.js</a> and a Node.js development environment.</li>
                <li>These Node.js modules: <ul>
                        <li><a href="https://github.com/visionmedia/express">Express
                                framework</a>, which makes it easy to build Node.js web
                            apps.</li>
                        <li><a href="http://simplesentimentanalysis.bluemix.net/">Watson
                                Developer Cloud</a>, which provides many SDKs that use
                            cognitive computing to solve complex problems.</li>
                        <li><a href="https://github.com/kevindeland/RapGenius-JS"
                                >RapGenius-JS module</a>, which provides a client that
                            enables you to query genius.com (formerly rapgenius.com) and
                            retrieve information about rap and rock artists and songs.
                            (This repo is a slightly modified fork of the original <a
                                href="https://github.com/kenshiro-o/RapGenius-JS"
                                >RapGenius-JS repo</a>.)</li>
                    </ul>
                </li>
                <li>The <a href="https://github.com/cloudfoundry/cli/releases">Cloud
                        Foundry CLI</a> tools</li>
                <li> GitHub command line </li>

            </ol>


            <call-to-action-block type="watch">
                <text>Getting started with Node.js (video demo)</text>
                <url>http://www.ibm.com/developerworks/offers/lp/demos/summary/j-jnodejs.html</url>
            </call-to-action-block>

            <call-to-action-block type="read">
                <text>Uploading your Bluemix application</text>
                <url>https://www.ng.bluemix.net/docs/#starters/upload_app.html</url>
            </call-to-action-block>

            <call-to-action-block type="read">
                <text>Spotify Authorization Guide</text>
                <url>https://developer.spotify.com/web-api/authorization-guide/</url>
            </call-to-action-block>

            <call-to-action-block type="read">
                <text>Genius API Docs</text>
                <url>https://docs.genius.com/</url>
            </call-to-action-block>


            <heading refname="" type="h2" back-to-top="no" inline-commenting-id="cmt_2"
                >Step 1. Fork the application code from GitHub, and Create Bluemix
                App</heading>
            
            <!-- FIX THIS -->
            <sidebar><p>TWO SENTENCES EXPLAINING APP-NAME - Bob Dylan, Blowing in the Wind</p></sidebar>

            <ol>
                <li>Go to <a href="https://github.com/kevindeland/letrista-watson">the
                        cuantos-caminos Git repository</a>, and click
                        <strong>Fork</strong> in the upper right corner. </li>
                <li>Give your new repository a name.</li>
                <li>In your command line, change into the repository where you want to put
                    your code, and clone it from the Git repo:
                        <p><code>git clone git@github.ibm.com:disaster-hack-cio/cuantos-caminos.git</code></p>
                </li>
                <li> Enter the <code>cd</code> command to change into your new repository. </li>
                <li>Change into the authorization_code directory:
                        <p><code>cd authorization_code</code></p>
                </li>
                <li> Use your preferred text editor to open the <code>manifest.yml</code>
                    file and set your application name. You must pick a unique name for
                    your app, which helps to form its URL. If your app name is
                        <strong>my-watson-app</strong>, then your URL will be
                        <strong>http://my-watson-app.mybluemix.net</strong>. Remember this
                    URL, as you will need it in a few more places. <code-listing>
                        <heading refname="manifest">manifest.yml</heading>
                        <pre>
                  applications:
                  - name: ~YOUR_APP_NAME_HERE~
                  memory: 128M
                  command: node app.js
                  instances: 1
                  path: .
                  env:
                  NODE_ENV: development
                </pre>
                    </code-listing>
                </li>
                <li> Edit the <code>config.js</code> file and add your app URL so that
                    your application knows which address to redirect to. <code-listing>
                        <heading refname="config_app">config.js</heading>
                        <pre>

                    var config = {};

                    var port = process.env.PORT || 8888; 

                    var my_uri = process.env.VCAP_SERVICES ? 'http://YOUR-APP-NAME.mybluemix.net' : 'http://localhost:' + port;

                    config.url = {
                    port: port,
                    uri: my_uri,
                    redirect_uri: my_uri + '/callback'
                    };

                  </pre>
                    </code-listing>
                </li>
                <li> Push your application to Bluemix by using the following commands: <ul>
                        <li><code>cf api api.ng.bluemix.net</code></li>
                        <li><code>cf login</code></li>
                        <li><code>cf push</code><p>This command will fail.</p></li>
                        <li><code>Ctrl+C</code><p>This command cancels the failed push.</p></li>
                    </ul>
                    <p>Note that this push should <strong>fail</strong> because it
                        requires a connection to a Watson Translation Service.</p>
                </li>
            </ol>

            <p>If you open your browser and go to your app URL, you see that the app is
                not working properly. We still need to perform a few more steps to get
                things running.</p>

            <heading refname="" type="h2" back-to-top="no" inline-commenting-id="cmt_3"
                >Step 2. Create a Watson Language Translation service, and bind your
                Bluemix app to it.</heading>
            <p>In our last step, we got the code and created our Bluemix app. Now we are
                going to create a Watson Language Translation Service to bind to our
                application.</p>

            <ol>
                <li> Log in to your <a href="https://console.ng.bluemix.net/">Bluemix
                        account</a>
                </li>
                <li> Click <strong>CATALOG</strong> to view the available Bluemix
                    services. </li>
                <li> Check the Watson check box in the left pane to filter the services to
                    only the Watson services. Find and click the Language Translation
                    Service <figure>
                        <img alt="Create a new Watson Language Translation Service"
                            height="122" src="WatsonLTS.png" width="104"/>
                    </figure>
                </li>
                <li> On the right side of the page, under the <em>Add Service</em> header,
                    fill in the fields with these values: <ul>
                        <li><strong>Apps</strong>. Select your recently created app from
                            the drop-down box.</li>
                        <li><strong>Service Name</strong>. Specify a name for your
                            service.</li>
                        <li><strong>Selected Plan</strong>. Select
                                <strong>Standard</strong> from the drop-down box.</li>
                    </ul>
                    <figure>
                        <img alt="Create a new Watson Languate Translation Service"
                            height="244" src="CreateWTLS.png" width="208"/>
                    </figure>
                </li>
                <li> Click <strong>CREATE</strong>. Then, restage your application to
                    allow it to bind to your new service. </li>
            </ol>
            <p>Great! Your application should now be running! Let's go back to the browser
                and visit our app URL to see what happens.</p>
            <figure>
                <img alt="Looks good so far" height="244" src="LoginScreen.png"
                    width="312"/>
            </figure>
            <p>Looks good so far! Let's try logging in with Spotify.</p>
            <figure>
                <img alt="Invalid Client" height="244" src="InvalidClient.png" width="312"
                />
            </figure>
            <p>Because our app is not yet registered with Spotify, we get an
                <code>Invalid client</code> error. Continue to the next step to see how to
                fix this error.</p>


            <heading refname="" type="h2" back-to-top="no" inline-commenting-id="cmt_4"
                >Step 3. Register your application with Spotify</heading>
            <p>Follow these steps to register our app with Spotify.</p>

            <ol>
                <li>Go to your <a href="https://developer.spotify.com/my-applications">
                        Spotify Developer Account</a> to manage your applications. Log in
                    if necessary.</li>
                <li>Click the <strong>CREATE AN APP</strong> button. </li>
                <li>Fill in your application name and description, and click
                        <strong>CREATE</strong>. <figure>
                        <img alt="Name your App" height="244" src="SpotifyNameApp.png"
                            width="416"/>
                    </figure>
                </li>
                <li> Here comes the important part. On this page, we will specify the
                    parameters needed for authentication. We need our Client ID and our
                    Client Secret to authenticate. We also need to set the Redirect URIs
                    so Spotify can redirect to our app after authentication. <ul>
                        <li> Copy the Client ID and Client Secret, and paste them into
                            your config.js file. <figure>
                                <img alt="Client ID and Client Secret" height="244"
                                    width="440" src="SpotifyClientIDSecret.png"/>
                            </figure>
                            <code-listing>
                                <heading refname="config_spotify">Spotify Client ID and
                                    Client Secret in config.js</heading>
                                <pre>
                        config.spotify = {
                        client_id: 'GET_FROM_SPOTIFY_IN_STEP_3', // Your client id
                        client_secret: 'GET_FROM_SPOTIFY_IN_STEP_3' // Your client secret
                        };
                      </pre>
                            </code-listing>
                        </li>
                        <li> Add two Redirect URIs: <strong>YOUR_APP_URL/callback</strong>
                            for your Bluemix app, and
                                <strong>http://localhost:8888</strong> for local testing. <figure>
                                <img alt="Redirect URIs" height="244" width="440"
                                    src="RedirectURIs.png"/>
                            </figure>
                        </li>
                        <li>Click <strong>SAVE</strong> to save your changes. </li>
                    </ul>
                </li>
            </ol>

            <heading refname="" type="h2" back-to-top="no" inline-commenting-id="cmt_5"
                >Step 4. Register your Application with Genius.com</heading>
            <p>Genius.com is a website that hosts song lyrics, as well as user-added
                annotations for those songs. We are going to use their API to access song
                lyrics, which we will then translate with Watson Language Translation. But
                first, we must register our application to get an API Key. </p>
            <ol>
                <li> Go to the <a href="https://genius.com/api-clients">Genius API Client
                        Site</a>. </li>
                <li>In the Create a New API Client window, fill in the APP NAME and APP
                    WEBSITE URL fields, and click <strong>Save</strong>. You can leave
                    REDIRECT URI blank because we will not be authenticating with Genius. <figure>
                        <img alt="Create a New API Client" height="244" width="400"
                            src="GeniusNewAPI.png"/>
                    </figure>
                </li>
                <li> Copy and Paste the CLIENT_ID, CLIENT_SECRET, and CLIENT_ACCESS_TOKEN
                    into your config.js file. <code-listing>
                        <heading refname="config_genius">Genius Client ID, Client Secret,
                            and Client Access Token in config.js</heading>
                        <pre>
                  config.genius = {
                  CLIENT_ID: "GET_FROM_GENIUS_IN_STEP_4",
                  CLIENT_SECRET: "GET_FROM_GENIUS_IN_STEP_4",
                  CLIENT_ACCESS_TOKEN: "GET_FROM_GENIUS_IN_STEP_4"
                  };
                </pre>
                    </code-listing>
                </li>

            </ol>



            <heading refname="" type="h2" back-to-top="no" inline-commenting-id="cmt_6"
                >Step 5 (Optional). Testing Locally</heading>
            <p>It is good practice to test locally before you push to the cloud. Before we
                run our app locally, we have to make some of our Bluemix environment
                variables available locally.</p>
            <ol>
                <li>Go to your Bluemix Dashboard.</li>
                <li>Find your app, and click it to open your app page.</li>
                <li>Find the Watson Language Translation Service, and click <strong>Show
                        Credentials</strong>. <figure>

                        <img alt="Show Credentials" height="244" width="200"
                            src="WLTSCredentials.png"/>
                    </figure>
                </li>
                <li> Copy and paste the values for <code>username</code> and
                    <code>password</code> into your config.js file. <code-listing>
                        <heading refname="config_watson">Bluemix credentials in
                            config.js</heading>
                        <pre>
                    config.watson = {
                    username: 'GET_FROM_BLUEMIX_IN_STEP_2',
                    password: 'GET_FROM_BLUEMIX_IN_STEP_2',
                    version: 'v2'
                    };
                  </pre>
                    </code-listing>
                </li>

            </ol>
            <p>After you save these changes to your code, you can test your app
                locally.</p>
            <ol>
                <li>Change to your project's root directory.</li>
                <li>Run <code>node app.js</code></li>
                <li>Open your browser and go to <code>localhost:8888</code>.</li>
                <li>Log in with your Spotify Account (use your Facebook account, if
                    necessary).</li>
                <li>Choose a quiz to play, and see Watson in action.</li>
            </ol>



            <heading type="h2" refname="pushing" back-to-top="no"
                inline-commenting-id="cmt_7">Step 6: Pushing to Bluemix</heading>
            <p>Finally, let's push our app to Bluemix so the world can play!</p>
            <ol>
                <li>Change to your project's root directory.</li>
                <li>Push the code to Bluemix: <p><code>cf push</code></p></li>
                <li>Go to browser to see your project in action!</li>
            </ol>

            <p>Let's see what kind of songs we get. Here are a few simple example
                questions.</p>

            <p>Watson isn't much of a joker, but if you let these lyrics mill around in your head, the answer just might come to you.</p>

            <figure>
                <img alt="Some words don't translate well to Spanish" height="244"
                    src="toker.png" width="400"/>
            </figure>

            <p>Some songs are revolutionary and use lots of repetition.</p>

            <figure>
                <img alt="Number Nine" height="242" src="number9.png" width="400"/>
            </figure>

            <p>Hey, now here's a popular song.</p>

            <figure>
                <img alt="Hey Jude" height="300" src="heyJude.png" width="600"/>
            </figure>

            <p>To see how to add your own playlists, go to the following section.</p>


            <heading refname="" type="h2" back-to-top="no" inline-commenting-id="cmt_8"
                >Step 7 (Optional). Add your own playlist to the selection.</heading>
            <p>Okay, now we have all the parts in place to complete your app. The app
                defaults to use three playlists: a Rock playlist, a Rap playlist, and a
                Beatles playlist. Follow these instructions to add your own playlist. (You
                are better off adding playlists with songs that have words, obviously.
                Apologies to the lovers of classical music and ambient trance).</p>

            <p>To add your own playlist, you need two fields:</p>
            <ol>
                <li>The Spotify ID of the user who owns the playlist</li>
                <li>The playlist ID</li>
            </ol>

            <p>Follow these steps to find them:</p>
            <ol>
                <li>Go to your playlist in the web browser or native app.</li>
                <li>Click the drop-down menu, and click <strong>Copy Spotify URI</strong>.
                        <img alt="Click on 'Copy Spotify URI'" height="344"
                        src="SpotifyPlaylistDropdown.png" width="150"/>
                </li>

                <li> Go to the angular file <code>public/js/quiz.js</code> and find the
                    variable <code>playlist_map</code>
                    <img alt="Add your own playlist here" src="addPlaylistQuizJs.png"
                        height="150" width="250"/>
                </li>
                <li>Create a key in the map with the value that has your user ID and
                    spotify ID.</li>
                <li>Go to the html file [public/index.html] and find where all the
                    playlists are displayed. <img alt="Add your own playlist here"
                        src="addPlaylistIndexHtml.png" height="200" width="600"/>
                </li>
                <li>Add a line, with <code>playlistid=x</code>, where x is the key that
                    you used in the previous two steps.</li>
            </ol>

            <heading type="h2" refname="conclusion" back-to-top="no"
                inline-commenting-id="cmt_9">Conclusion and next steps</heading>

            <p>The Translation Service is just one of many Watson Language Services
                that are all available on Bluemix. Which of the other Watson Services do
                you think we could use with song lyrics?</p>
            <ul>
                <li>The <strong>Sentiment Analysis</strong> service can track the overall
                    sentiments of songs, and then generate playlists that cater to a
                    certain mood.</li>
                <li>The <strong>Concept Insights</strong> service can extract what
                    concepts artists are singing about, and contrast and compare
                    them.</li>
                <li>The <strong>Relationship Extraction</strong> (Alchemy API) service can
                    find relationships between subjects, actions, and objects in songs,
                    and build a database of lyrics tools to generate new songs.</li>
            </ul>


            <!-- RELATED-TOPICS-BLOCK - REQUIRED -->
            <related-topics-block>
                <link>
                    <text>Node.js</text>
                    <url>http://www.ibm.com/developerworks/views/global/libraryview.jsp?site_id=1&amp;contentarea_by=All%20Zones&amp;sort_by=Date&amp;sort_order=2&amp;start=1&amp;end=96&amp;topic_by=-1&amp;product_by=-1&amp;type_by=All%20Types&amp;show_abstract=true&amp;search_by=node.js&amp;industry_by=-1&amp;series_title_by=</url>
                </link>
                <link>
                    <text>JavaScript</text>
                    <url>http://www.ibm.com/developerworks/views/global/libraryview.jsp?site_id=1&amp;contentarea_by=All%20Zones&amp;sort_by=Date&amp;sort_order=2&amp;start=1&amp;end=100&amp;topic_by=-1&amp;product_by=-1&amp;type_by=All%20Types&amp;show_abstract=true&amp;search_by=JavaScript&amp;industry_by=-1&amp;series_title_by=</url>
                </link>
<!--                <link>
                    <text>Social analytics</text>
                    <url>http://www.ibm.com/developerworks/topics/social data analytics/</url>
                </link>-->
            </related-topics-block>

        </docbody>

<!--        <link-to-english/>-->
    </dw-article>
</dw-document>
